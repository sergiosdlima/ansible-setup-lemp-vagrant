---
- hosts: all
  become: yes
  vars:
    php_version: 8.2
    composer_version: 2.7.7
    mysql_root_password: "senha-root"
    mysql_admin_user: usuario-admin
    mysql_admin_password: "senha-admin"
    mysql_db_name: laravel
    domain_name: teste.com.br
    app_name: teste
    user: deployer
  tasks:
    - name: Update and upgrade apt packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 86400

    - name: Install software-properties-common
      ansible.builtin.apt:
        name: software-properties-common
        state: present

    - name: Install Nodejs and NPM
      ansible.builtin.apt:
        name: 
          - nodejs
          - npm
        state: present

    - name: Add Ondrej PHP PPA repository
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Install PHP {{ php_version }} and necessary extensions
      ansible.builtin.apt:
        name:
          - php{{ php_version }}
          - php{{ php_version }}-curl
          - php{{ php_version }}-fpm
          - php{{ php_version }}-gd
          - php{{ php_version }}-intl
          - php{{ php_version }}-mbstring
          - php{{ php_version }}-mysql
          - php{{ php_version }}-xml
          - php{{ php_version }}-zip
        state: present

    - name: Start and enable PHP-FPM
      ansible.builtin.systemd_service:
        name: php{{ php_version }}-fpm
        state: started
        enabled: yes

    - name: Check if Composer is installed (ignore if fails)
      ansible.builtin.stat:
        path: /usr/local/bin/composer
      register: composer_installed

    - name: Download and install Composer globally
      ansible.builtin.shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version={{ composer_version }}
      when: not composer_installed.stat.exists

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Start and enable Nginx
      ansible.builtin.systemd_service:
        name: nginx
        state: started
        enabled: yes

    - name: Install MySQL Server
      ansible.builtin.apt:
        name:
          - mysql-server
          - mysql-client
          - python3-pymysql
        state: present

    - name: Start and enable MySQL
      ansible.builtin.systemd_service:
        name: mysql
        state: started
        enabled: yes

    - name: Set root password
      community.mysql.mysql_user:
        name: root
        host_all: yes
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        priv: "*.*:ALL,GRANT"

    - name: Create .my.cnf file with root credentials
      ansible.builtin.copy:
        dest: /root/.my.cnf
        content: |
          [client]
          user=root
          password="{{ mysql_root_password }}"
        owner: root
        group: root
        mode: '0600'

    - name: Remove anonymous users
      community.mysql.mysql_user:
        name: ""
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Remove test database
      community.mysql.mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Create admin user with remote access
      community.mysql.mysql_user:
        name: "{{ mysql_admin_user }}"
        password: "{{ mysql_admin_password }}"
        priv: '*.*:ALL'
        host: '%'
        append_privs: yes
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: creating database
      community.mysql.mysql_db:
        name: "{{ mysql_db_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Add the user "{{ user }}" and generate ssh key
      ansible.builtin.user:
        name: "{{ user }}"
        comment: Deployer User
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: ed25519
        ssh_key_bits: 4096
      register: client_user

    - name: Fetch public ssh key from ssh client
      fetch:
        src: "{{ client_user.home }}/.ssh/id_ed25519.pub"
        dest: "{{ playbook_dir }}/id_{{ user }}_on_{{ domain_name }}.pub"
        flat: yes

    - name: Fetch private ssh key from ssh client
      fetch:
        src: "{{ client_user.home }}/.ssh/id_ed25519"
        dest: "{{ playbook_dir }}/id_{{ user }}_on_{{ domain_name }}"
        flat: yes

    - name: Copy the content of public key of "{{ user }}" user to authorized_keys
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ lookup('file', playbook_dir + '/id_' + user + '_on_' + domain_name + '.pub') }}"

    # - name: Set authorized key for user "{{ user }}" copying it from current user
    #   authorized_key:
    #     user: "{{ user }}"
    #     state: present
    #     key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_ed25519.pub') }}"

    - name: Add the user "{{ user }}" to group www-data
      ansible.builtin.user:
        name: "{{ user }}"
        groups: www-data

    - name: Check if application directory exists
      ansible.builtin.stat:
        path: "/var/www/{{ app_name }}"
      register: app_directory

    - name: Set up application directory structure
      file:
        path: "/var/www/{{ app_name }}"
        state: directory
        owner: "{{ user }}"
        group: www-data
        mode: 0755
      when: not app_directory.stat.exists

    # - name: Deploy application code (example, adjust as necessary)
    #   git:
    #     repo: 'https://github.com/your/repo.git'
    #     dest: "/var/www/{{ app_name }}"

    - name: Install acl
      ansible.builtin.apt:
        name: acl
        state: present
      when: not app_directory.stat.exists

    - name: Grant read-write-execute permissions to "{{ user }}" user for directory /var/www
      ansible.posix.acl:
        path: /var/www
        entity: "{{ user }}"
        etype: user
        permissions: rwx
        recursive: true
        state: present
      when: not app_directory.stat.exists

    - name: Change the owner and group for directory /var/www
      ansible.builtin.command:
        cmd: "chown -R {{ user }}:www-data /var/www/"
      when: not app_directory.stat.exists

    - name: Register all directories under /var/www
      ansible.builtin.find:
        paths: /var/www/
        recurse: yes
        file_type: directory
      register: directories
      when: not app_directory.stat.exists

    - name: Set chmod g+s (bit SetGID) for directories under /var/www
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: g+s
        state: directory
      loop: "{{ directories.files }}"
      when: not app_directory.stat.exists

    - name: Configure firewall to allow ssh traffic with limit rate
      community.general.ufw:
        rule: limit
        port: ssh
        proto: tcp

    - name: Configure firewall to allow Nginx traffic
      community.general.ufw:
        rule: allow
        name: "Nginx Full"

    - name: Enable firewall
      community.general.ufw:
        state: enabled

    - name: Disable the Nginx default site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - reload nginx

    - name: Configure Nginx for PHP-FPM
      template:
        src: nginx-template.conf.j2
        dest: "/etc/nginx/sites-available/{{ app_name }}"

    - name: Enable Nginx for PHP-FPM site
      file:
        src: "/etc/nginx/sites-available/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link
      notify:
        - reload nginx

  handlers:
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
